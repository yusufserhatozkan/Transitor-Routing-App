Index: src/Algorithm/Dijkstra/CustomDijkstra.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n//TODO: based on the return, query the different Routes -> bus numbers\n\npackage Algorithm.Dijkstra;\n\nimport org.jgrapht.Graph;\nimport org.jgrapht.graph.DefaultDirectedWeightedGraph;\nimport java.util.*;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nimport Data.DataGetter;\nimport Algorithm.Distance.*;\n\npublic class CustomDijkstra {\n    private final Graph<String, CustomEdge> graph;\n    private final Map<String, Double> distances;\n    private final Map<String, String> previousNodes;\n    private final PriorityQueue<Node> priorityQueue;\n\n    private static String lastTimeParameter = \"\";\n\n//MARK: Constructor\n    public CustomDijkstra(Graph<String, CustomEdge> graph) {\n        this.graph = graph;\n        this.distances = new HashMap<>();\n        this.previousNodes = new HashMap<>();\n        this.priorityQueue = new PriorityQueue<>(Comparator.comparingDouble(Node::getDistance));\n    }\n\n\n//MARK: Main method\n    public static void mainCustomDijkstra(String originPostcode, String destinationPostcode, double radius, String time) {\n        boolean rebuildGraph = shouldRebuildGraph(time);\n\n        DataGetter dataGetter = new DataGetter();\n        DistanceCalculator distanceCalculator = new DistanceCalculator();\n        dataGetter.cleanData();\n        int counter = 0;\n\n        Graph<String, CustomEdge> graph;\n\n        if (!rebuildGraph && GraphCache.isGraphCached()) {\n            // Reuse cached graph\n            graph = GraphCache.getCachedGraph();\n            // Remove old superNodes if they exist\n            removeSuperNodes(graph);\n        } else {\n            // Create a new graph with custom edges\n            graph = new DefaultDirectedWeightedGraph<>(CustomEdge.class);\n            // Retrieve bus stops and routes\n            Map<String, String[]> busStops = dataGetter.getAllBusStops();\n\n            // Add bus stops as nodes\n            for (String busStop : busStops.keySet()) {\n                graph.addVertex(busStop);\n            }\n\n//MARK: Parallel processing            \n            // Use ExecutorService for parallel processing\n            ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n            List<Callable<Void>> tasks = new ArrayList<>();\n\n            List<String> stopIds = new ArrayList<>(busStops.keySet());\n\n            for (String fromStop : stopIds) {\n                tasks.add(() -> {\n                    List<Map<String, Object>> routeWeights = RouteWeights.getRouteWeights(Collections.singletonList(fromStop), time);\n                    for (Map<String, Object> weightData : routeWeights) {\n                        String toStop = (String) weightData.get(\"end_stop_id\");\n                        int tripId = (int) weightData.get(\"trip_id\");\n                        double travelTime = (double) weightData.get(\"travel_time\");\n\n                        if (graph.containsVertex(fromStop) && graph.containsVertex(toStop)) {\n                            graph.addEdge(fromStop, toStop, new CustomEdge(Collections.singletonMap(tripId, travelTime)));\n                        }\n                    }\n                    return null;\n                });\n            }\n\n            try {\n                executorService.invokeAll(tasks);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                executorService.shutdown();\n            }\n\n//MARK: Cache graph\n            GraphCache.cacheGraph((DefaultDirectedWeightedGraph<String, CustomEdge>) graph);\n        }\n\n\n\n//MARK: Add superNodes        \n        double[] originCoordinates = dataGetter.getLocationFromApiReader(originPostcode);\n        double[] destinationCoordinates = dataGetter.getLocationFromApiReader(destinationPostcode);\n\n        if (originCoordinates == null || destinationCoordinates == null) {\n            throw new IllegalArgumentException(\"Invalid postal code: \" + (originCoordinates == null ? originPostcode : destinationPostcode));\n        }\n\n        double startLat = Double.parseDouble(String.valueOf(originCoordinates[0]).replace(',', '.'));\n        double startLon = Double.parseDouble(String.valueOf(originCoordinates[1]).replace(',', '.'));\n        double endLat = Double.parseDouble(String.valueOf(destinationCoordinates[0]).replace(',', '.'));\n        double endLon = Double.parseDouble(String.valueOf(destinationCoordinates[1]).replace(',', '.'));\n\n        String startNode = originPostcode;\n        String endNode = destinationPostcode;\n\n        graph.addVertex(startNode);\n        graph.addVertex(endNode);\n\n//MARK: Add edges from start and end nodes to the bus stops\n        // Connect start and end nodes to all other nodes\n        Map<String, String[]> busStops = dataGetter.getAllBusStops();\n        for (String busStop : graph.vertexSet()) {\n            if (!busStop.equals(startNode) && !busStop.equals(endNode)) {\n                String[] latLon = busStops.get(busStop);\n                if (latLon == null) {\n                    System.err.println(\"Missing data for bus stop: \" + busStop);\n                    continue; // Skip this bus stop if data is missing\n                }\n\n                double lat = Double.parseDouble(latLon[0].replace(',', '.'));\n                double lon = Double.parseDouble(latLon[1].replace(',', '.'));\n\n                double startDistance = distanceCalculator.calculateWalkingTime(distanceCalculator.calculateDistance(startLat, startLon, lat, lon));\n                double endDistance = distanceCalculator.calculateWalkingTime(distanceCalculator.calculateDistance(endLat, endLon, lat, lon));\n\n                // Add edges from start and end nodes to the bus stop\n                graph.addEdge(startNode, busStop, new CustomEdge(Collections.singletonMap(counter++, startDistance)));\n                graph.addEdge(busStop, endNode, new CustomEdge(Collections.singletonMap(counter++, endDistance)));\n            }\n        }\n\n//MARK: Run  Dijkstra\n        CustomDijkstra dijkstra = new CustomDijkstra(graph);\n        dijkstra.execute(startNode);\n        List<String> path = dijkstra.getPath(endNode);\n        double totalTravelTime = dijkstra.getTotalTravelTime(endNode);\n\n//MARK: output                \n        // Print the shortest path and total travel time\n        System.out.println(\"Shortest path from \" + startNode + \" to \" + endNode + \":\");\n        for (int i = 0; i < path.size() - 1; i++) {\n            String node = path.get(i);\n            String nextNode = path.get(i + 1);\n            CustomEdge edge = graph.getEdge(node, nextNode);\n            System.out.println(node + \" via edge \" + edge + \" to \" + nextNode);\n        }\n        System.out.println(endNode);\n        System.out.println(\"Total travel time: \" + totalTravelTime + \" minutes\");\n\n//MARK: Debug        \n        // Debug: Print graph nodes and edges\n                    // System.out.println(\"Graph Nodes:\");\n                    // for (String node : graph.vertexSet()) {\n                    //     System.out.println(\"Node: \" + node);\n                    // }\n\n                    // System.out.println(\"Graph Edges:\");\n                    // for (CustomEdge edge : graph.edgeSet()) {\n                    //     String source = graph.getEdgeSource(edge);\n                    //     String target = graph.getEdgeTarget(edge);\n                    //     Map<Integer, Double> weights = edge.getIdWeightMap();\n\n                    //     StringBuilder weightsString = new StringBuilder();\n                    //     for (Map.Entry<Integer, Double> entry : weights.entrySet()) {\n                    //         weightsString.append(\"[\").append(entry.getKey()).append(\"=\").append(entry.getValue()).append(\"] \");\n                    //     }\n\n                    //     System.out.println(\"Source: \" + source + \", Target: \" + target + \", Weights: \" + weightsString.toString().trim());\n                    // }\n\n        // Update the last time parameter\n        lastTimeParameter = time;\n    }\n\n//MARK: rm old SuperNodes\n    private static void removeSuperNodes(Graph<String, CustomEdge> graph) {\n        List<String> superNodes = new ArrayList<>();\n        for (String vertex : graph.vertexSet()) {\n            if (vertex.startsWith(\"superNode\")) {\n                superNodes.add(vertex);\n            }\n        }\n        for (String superNode : superNodes) {\n            graph.removeVertex(superNode);\n        }\n    }\n\n\n    private static boolean shouldRebuildGraph(String currentTime) {\n        return !GraphCache.isGraphCached() || !currentTime.equals(lastTimeParameter);\n    }\n\n\n\n//MARK: Old main method 2\n//--------------Old version------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    // public static void mainCustomDijkstra(String originPostcode, String destinationPostcode, double radius, String time) {\n    //     DataGetter dataGetter = new DataGetter();\n    //     DistanceCalculator distanceCalculator = new DistanceCalculator();\n    //     dataGetter.cleanData();\n    //     int counter = 0;\n    \n    //     // Create a graph with custom edges\n    //     Graph<String, CustomEdge> graph = new DefaultDirectedWeightedGraph<>(CustomEdge.class);\n    \n    //     // Retrieve bus stops and routes\n    //     Map<String, String[]> busStops = dataGetter.getAllBusStops();\n    \n    //     // Add bus stops as nodes\n    //     for (String busStop : busStops.keySet()) {\n    //         graph.addVertex(busStop);\n    //     }\n    \n    //     // SuperNodes\n    //     double[] originCoordinates = dataGetter.getLocationFromApiReader(originPostcode);\n    //     double[] destinationCoordinates = dataGetter.getLocationFromApiReader(destinationPostcode);\n    \n    //     if (originCoordinates == null || destinationCoordinates == null) {\n    //         throw new IllegalArgumentException(\"Invalid postal code: \" + (originCoordinates == null ? originPostcode : destinationPostcode));\n    //     }\n    \n    //     double startLat = Double.parseDouble(String.valueOf(originCoordinates[0]).replace(',', '.'));\n    //     double startLon = Double.parseDouble(String.valueOf(originCoordinates[1]).replace(',', '.'));\n    //     double endLat = Double.parseDouble(String.valueOf(destinationCoordinates[0]).replace(',', '.'));\n    //     double endLon = Double.parseDouble(String.valueOf(destinationCoordinates[1]).replace(',', '.'));\n    \n    //     String startNode = originPostcode;\n    //     String endNode = destinationPostcode;\n    \n    //     graph.addVertex(startNode);\n    //     graph.addVertex(endNode);\n    \n    //     // Connect start and end nodes to all other nodes\n    //     for (String busStop : busStops.keySet()) {\n    //         String[] latLon = busStops.get(busStop);\n    //         double lat = Double.parseDouble(latLon[0].replace(',', '.'));\n    //         double lon = Double.parseDouble(latLon[1].replace(',', '.'));\n    \n    //         double startDistance = distanceCalculator.calculateWalkingTime(distanceCalculator.calculateDistance(startLat, startLon, lat, lon));\n    //         double endDistance = distanceCalculator.calculateWalkingTime(distanceCalculator.calculateDistance(endLat, endLon, lat, lon));\n    \n    //         // Add edges from start and end nodes to the bus stop\n    //         graph.addEdge(startNode, busStop, new CustomEdge(Collections.singletonMap(counter++, startDistance)));\n    //         graph.addEdge(busStop, endNode, new CustomEdge(Collections.singletonMap(counter++, endDistance)));\n    //     }\n    \n    //     // Use ExecutorService for parallel processing\n    //     ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n    //     List<Callable<Void>> tasks = new ArrayList<>();\n    \n    //     List<String> stopIds = new ArrayList<>(busStops.keySet());\n    \n    //     for (String fromStop : stopIds) {\n    //         tasks.add(() -> {\n    //             List<Map<String, Object>> routeWeights = RouteWeights.getRouteWeights(Collections.singletonList(fromStop), time);\n    //             for (Map<String, Object> weightData : routeWeights) {\n    //                 String toStop = (String) weightData.get(\"end_stop_id\");\n    //                 int tripId = (int) weightData.get(\"trip_id\");\n    //                 double travelTime = (double) weightData.get(\"travel_time\");\n    \n    //                 if (graph.containsVertex(fromStop) && graph.containsVertex(toStop)) {\n    //                     graph.addEdge(fromStop, toStop, new CustomEdge(Collections.singletonMap(tripId, travelTime)));\n    //                 }\n    //             }\n    //             return null;\n    //         });\n    //     }\n    \n    //     try {\n    //         executorService.invokeAll(tasks);\n    //     } catch (InterruptedException e) {\n    //         e.printStackTrace();\n    //     } finally {\n    //         executorService.shutdown();\n    //     }\n    \n    //     // Run Dijkstra's algorithm\n    //         CustomDijkstra dijkstra = new CustomDijkstra(graph);\n    //         dijkstra.execute(startNode);\n    //         List<String> path = dijkstra.getPath(endNode);\n        \n    //         // Print the shortest path\n    //         System.out.println(\"Shortest path from \" + startNode + \" to \" + endNode + \":\");\n    //         for (String node : path) {\n    //             System.out.println(node);\n    //         }\n\n\n\n    //             // // Debug: Print graph nodes and edges\n    //             // System.out.println(\"Graph Nodes:\");\n    //             // for (String node : graph.vertexSet()) {\n    //             //     System.out.println(\"Node: \" + node);\n    //             // }\n            \n    //             // System.out.println(\"Graph Edges:\");\n    //             // for (CustomEdge edge : graph.edgeSet()) {\n    //             //     String source = graph.getEdgeSource(edge);\n    //             //     String target = graph.getEdgeTarget(edge);\n    //             //     Map<Integer, Double> weights = edge.getIdWeightMap();\n            \n    //             //     StringBuilder weightsString = new StringBuilder();\n    //             //     for (Map.Entry<Integer, Double> entry : weights.entrySet()) {\n    //             //         weightsString.append(\"[\").append(entry.getKey()).append(\"=\").append(entry.getValue()).append(\"] \");\n    //             //     }\n            \n    //             //     System.out.println(\"Source: \" + source + \", Target: \" + target + \", Weights: \" + weightsString.toString().trim());\n    //             // }\n    // }\n//---------------------------------old version 2--------------------------------------------------------------------\n\n//MARK: execute Dijkstra's algorithm\n    public void execute(String startNode) {\n        for (String node : graph.vertexSet()) {\n            if (node.equals(startNode)) {\n                distances.put(node, 0.0);\n                priorityQueue.add(new Node(node, 0.0));\n            } else {\n                distances.put(node, Double.MAX_VALUE);\n                priorityQueue.add(new Node(node, Double.MAX_VALUE));\n            }\n            previousNodes.put(node, null);\n        }\n\n        while (!priorityQueue.isEmpty()) {\n            Node currentNode = priorityQueue.poll();\n            String currentLabel = currentNode.getLabel();\n\n            for (CustomEdge edge : graph.outgoingEdgesOf(currentLabel)) {\n                String adjacentNode = graph.getEdgeTarget(edge);\n                double edgeWeight = edge.getIdWeightMap().values().stream().mapToDouble(Double::doubleValue).sum();\n\n                double newDist = distances.get(currentLabel) + edgeWeight;\n                if (newDist < distances.get(adjacentNode)) {\n                    distances.put(adjacentNode, newDist);\n                    previousNodes.put(adjacentNode, currentLabel);\n                    priorityQueue.add(new Node(adjacentNode, newDist));\n                }\n            }\n        }\n    }\n\n//MARK: Get path \n    public List<String> getPath(String endNode) {\n        List<String> path = new LinkedList<>();\n        for (String at = endNode; at != null; at = previousNodes.get(at)) {\n            path.add(at);\n        }\n        Collections.reverse(path);\n        return path;\n    }\n\n//MARK: total time\n    public double getTotalTravelTime(String endNode) {\n        return distances.getOrDefault(endNode, Double.MAX_VALUE);\n    }\n\n//MARK: Node class\n    private static class Node {\n        private final String label;\n        private final double distance;\n\n        public Node(String label, double distance) {\n            this.label = label;\n            this.distance = distance;\n        }\n\n        public String getLabel() {\n            return label;\n        }\n\n        public double getDistance() {\n            return distance;\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Algorithm/Dijkstra/CustomDijkstra.java b/src/Algorithm/Dijkstra/CustomDijkstra.java
--- a/src/Algorithm/Dijkstra/CustomDijkstra.java	(revision 90601770cade0a63ca616dab2deeaf439b12f002)
+++ b/src/Algorithm/Dijkstra/CustomDijkstra.java	(date 1719059796869)
@@ -5,6 +5,9 @@
 
 import org.jgrapht.Graph;
 import org.jgrapht.graph.DefaultDirectedWeightedGraph;
+
+import java.time.Duration;
+import java.time.Instant;
 import java.util.*;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
@@ -30,13 +33,14 @@
     }
 
 
-//MARK: Main method
-    public static void mainCustomDijkstra(String originPostcode, String destinationPostcode, double radius, String time) {
+    public void mainCustomDijkstra(String originPostcode, String destinationPostcode, double radius, String time) {
+        Instant startTime = Instant.now();
+
         boolean rebuildGraph = shouldRebuildGraph(time);
 
         DataGetter dataGetter = new DataGetter();
         DistanceCalculator distanceCalculator = new DistanceCalculator();
-        dataGetter.cleanData();
+//        dataGetter.cleanData();
         int counter = 0;
 
         Graph<String, CustomEdge> graph;
@@ -57,7 +61,7 @@
                 graph.addVertex(busStop);
             }
 
-//MARK: Parallel processing            
+//MARK: Parallel processing
             // Use ExecutorService for parallel processing
             ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
             List<Callable<Void>> tasks = new ArrayList<>();
@@ -94,7 +98,7 @@
 
 
 
-//MARK: Add superNodes        
+//MARK: Add superNodes
         double[] originCoordinates = dataGetter.getLocationFromApiReader(originPostcode);
         double[] destinationCoordinates = dataGetter.getLocationFromApiReader(destinationPostcode);
 
@@ -142,7 +146,10 @@
         List<String> path = dijkstra.getPath(endNode);
         double totalTravelTime = dijkstra.getTotalTravelTime(endNode);
 
-//MARK: output                
+        Instant endTime = Instant.now();
+        Duration timeElapsed = Duration.between(startTime, endTime);
+
+//MARK: output
         // Print the shortest path and total travel time
         System.out.println("Shortest path from " + startNode + " to " + endNode + ":");
         for (int i = 0; i < path.size() - 1; i++) {
@@ -154,26 +161,29 @@
         System.out.println(endNode);
         System.out.println("Total travel time: " + totalTravelTime + " minutes");
 
+        // Print time taken for execution
+        System.out.println("Time taken for execution: " + timeElapsed.toMillis() + " milliseconds");
+
 //MARK: Debug        
         // Debug: Print graph nodes and edges
-                    // System.out.println("Graph Nodes:");
-                    // for (String node : graph.vertexSet()) {
-                    //     System.out.println("Node: " + node);
-                    // }
+        // System.out.println("Graph Nodes:");
+        // for (String node : graph.vertexSet()) {
+        //     System.out.println("Node: " + node);
+        // }
 
-                    // System.out.println("Graph Edges:");
-                    // for (CustomEdge edge : graph.edgeSet()) {
-                    //     String source = graph.getEdgeSource(edge);
-                    //     String target = graph.getEdgeTarget(edge);
-                    //     Map<Integer, Double> weights = edge.getIdWeightMap();
+        // System.out.println("Graph Edges:");
+        // for (CustomEdge edge : graph.edgeSet()) {
+        //     String source = graph.getEdgeSource(edge);
+        //     String target = graph.getEdgeTarget(edge);
+        //     Map<Integer, Double> weights = edge.getIdWeightMap();
 
-                    //     StringBuilder weightsString = new StringBuilder();
-                    //     for (Map.Entry<Integer, Double> entry : weights.entrySet()) {
-                    //         weightsString.append("[").append(entry.getKey()).append("=").append(entry.getValue()).append("] ");
-                    //     }
+        //     StringBuilder weightsString = new StringBuilder();
+        //     for (Map.Entry<Integer, Double> entry : weights.entrySet()) {
+        //         weightsString.append("[").append(entry.getKey()).append("=").append(entry.getValue()).append("] ");
+        //     }
 
-                    //     System.out.println("Source: " + source + ", Target: " + target + ", Weights: " + weightsString.toString().trim());
-                    // }
+        //     System.out.println("Source: " + source + ", Target: " + target + ", Weights: " + weightsString.toString().trim());
+        // }
 
         // Update the last time parameter
         lastTimeParameter = time;
@@ -199,123 +209,6 @@
 
 
 
-//MARK: Old main method 2
-//--------------Old version------------------------------------------------------------------------------------------------------------------------------------------------------------------
-    // public static void mainCustomDijkstra(String originPostcode, String destinationPostcode, double radius, String time) {
-    //     DataGetter dataGetter = new DataGetter();
-    //     DistanceCalculator distanceCalculator = new DistanceCalculator();
-    //     dataGetter.cleanData();
-    //     int counter = 0;
-    
-    //     // Create a graph with custom edges
-    //     Graph<String, CustomEdge> graph = new DefaultDirectedWeightedGraph<>(CustomEdge.class);
-    
-    //     // Retrieve bus stops and routes
-    //     Map<String, String[]> busStops = dataGetter.getAllBusStops();
-    
-    //     // Add bus stops as nodes
-    //     for (String busStop : busStops.keySet()) {
-    //         graph.addVertex(busStop);
-    //     }
-    
-    //     // SuperNodes
-    //     double[] originCoordinates = dataGetter.getLocationFromApiReader(originPostcode);
-    //     double[] destinationCoordinates = dataGetter.getLocationFromApiReader(destinationPostcode);
-    
-    //     if (originCoordinates == null || destinationCoordinates == null) {
-    //         throw new IllegalArgumentException("Invalid postal code: " + (originCoordinates == null ? originPostcode : destinationPostcode));
-    //     }
-    
-    //     double startLat = Double.parseDouble(String.valueOf(originCoordinates[0]).replace(',', '.'));
-    //     double startLon = Double.parseDouble(String.valueOf(originCoordinates[1]).replace(',', '.'));
-    //     double endLat = Double.parseDouble(String.valueOf(destinationCoordinates[0]).replace(',', '.'));
-    //     double endLon = Double.parseDouble(String.valueOf(destinationCoordinates[1]).replace(',', '.'));
-    
-    //     String startNode = originPostcode;
-    //     String endNode = destinationPostcode;
-    
-    //     graph.addVertex(startNode);
-    //     graph.addVertex(endNode);
-    
-    //     // Connect start and end nodes to all other nodes
-    //     for (String busStop : busStops.keySet()) {
-    //         String[] latLon = busStops.get(busStop);
-    //         double lat = Double.parseDouble(latLon[0].replace(',', '.'));
-    //         double lon = Double.parseDouble(latLon[1].replace(',', '.'));
-    
-    //         double startDistance = distanceCalculator.calculateWalkingTime(distanceCalculator.calculateDistance(startLat, startLon, lat, lon));
-    //         double endDistance = distanceCalculator.calculateWalkingTime(distanceCalculator.calculateDistance(endLat, endLon, lat, lon));
-    
-    //         // Add edges from start and end nodes to the bus stop
-    //         graph.addEdge(startNode, busStop, new CustomEdge(Collections.singletonMap(counter++, startDistance)));
-    //         graph.addEdge(busStop, endNode, new CustomEdge(Collections.singletonMap(counter++, endDistance)));
-    //     }
-    
-    //     // Use ExecutorService for parallel processing
-    //     ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
-    //     List<Callable<Void>> tasks = new ArrayList<>();
-    
-    //     List<String> stopIds = new ArrayList<>(busStops.keySet());
-    
-    //     for (String fromStop : stopIds) {
-    //         tasks.add(() -> {
-    //             List<Map<String, Object>> routeWeights = RouteWeights.getRouteWeights(Collections.singletonList(fromStop), time);
-    //             for (Map<String, Object> weightData : routeWeights) {
-    //                 String toStop = (String) weightData.get("end_stop_id");
-    //                 int tripId = (int) weightData.get("trip_id");
-    //                 double travelTime = (double) weightData.get("travel_time");
-    
-    //                 if (graph.containsVertex(fromStop) && graph.containsVertex(toStop)) {
-    //                     graph.addEdge(fromStop, toStop, new CustomEdge(Collections.singletonMap(tripId, travelTime)));
-    //                 }
-    //             }
-    //             return null;
-    //         });
-    //     }
-    
-    //     try {
-    //         executorService.invokeAll(tasks);
-    //     } catch (InterruptedException e) {
-    //         e.printStackTrace();
-    //     } finally {
-    //         executorService.shutdown();
-    //     }
-    
-    //     // Run Dijkstra's algorithm
-    //         CustomDijkstra dijkstra = new CustomDijkstra(graph);
-    //         dijkstra.execute(startNode);
-    //         List<String> path = dijkstra.getPath(endNode);
-        
-    //         // Print the shortest path
-    //         System.out.println("Shortest path from " + startNode + " to " + endNode + ":");
-    //         for (String node : path) {
-    //             System.out.println(node);
-    //         }
-
-
-
-    //             // // Debug: Print graph nodes and edges
-    //             // System.out.println("Graph Nodes:");
-    //             // for (String node : graph.vertexSet()) {
-    //             //     System.out.println("Node: " + node);
-    //             // }
-            
-    //             // System.out.println("Graph Edges:");
-    //             // for (CustomEdge edge : graph.edgeSet()) {
-    //             //     String source = graph.getEdgeSource(edge);
-    //             //     String target = graph.getEdgeTarget(edge);
-    //             //     Map<Integer, Double> weights = edge.getIdWeightMap();
-            
-    //             //     StringBuilder weightsString = new StringBuilder();
-    //             //     for (Map.Entry<Integer, Double> entry : weights.entrySet()) {
-    //             //         weightsString.append("[").append(entry.getKey()).append("=").append(entry.getValue()).append("] ");
-    //             //     }
-            
-    //             //     System.out.println("Source: " + source + ", Target: " + target + ", Weights: " + weightsString.toString().trim());
-    //             // }
-    // }
-//---------------------------------old version 2--------------------------------------------------------------------
-
 //MARK: execute Dijkstra's algorithm
     public void execute(String startNode) {
         for (String node : graph.vertexSet()) {
Index: src/Data/DatabaseSingleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Data;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n/**\n * This class is used to access the database. The DataGetter class calls this class for each query\n * that it runs.\n */\npublic class DatabaseSingleton {\n    private static Connection connection = null;\n    private static final String DB_URL = \"jdbc:mysql://localhost:3306/bcs7?useSSL=false&allowPublicKeyRetrieval=true\";\n\n    private DatabaseSingleton() { }\n\n    public static Connection getConnection() {\n        if (connection == null) {\n            try {                \n                    String username = \"root\";\n                    String password = \"new_password\";\n                    connection = DriverManager.getConnection(DB_URL, username, password);\n                    System.out.println(\"connected to the database.\");\n            } catch (SQLException e) {\n                System.out.println(\"Error connecting to the database: \" + e.getMessage());\n                return null;\n            }\n        }\n        return connection;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Data/DatabaseSingleton.java b/src/Data/DatabaseSingleton.java
--- a/src/Data/DatabaseSingleton.java	(revision 90601770cade0a63ca616dab2deeaf439b12f002)
+++ b/src/Data/DatabaseSingleton.java	(date 1719052454320)
@@ -17,7 +17,7 @@
         if (connection == null) {
             try {                
                     String username = "root";
-                    String password = "new_password";
+                    String password = "Jatzunk91";
                     connection = DriverManager.getConnection(DB_URL, username, password);
                     System.out.println("connected to the database.");
             } catch (SQLException e) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"9b700896-7dee-405c-8b3c-2e421fae2747\" name=\"Changes\" comment=\"added AccessibilityScoreCalculator class so i can start working on it\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Interface\" />\n        <option value=\"HTML File\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <favorite-branches>\n      <branch-storage>\n        <map>\n          <entry type=\"REMOTE\">\n            <value>\n              <list>\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"origin/sqlQueryTest\" />\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"origin/jan56\" />\n              </list>\n            </value>\n          </entry>\n        </map>\n      </branch-storage>\n    </favorite-branches>\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"Jan4\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitLabMergeRequestFiltersHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPENED&quot;,\n    &quot;assignee&quot;: {\n      &quot;type&quot;: &quot;org.jetbrains.plugins.gitlab.mergerequest.ui.filters.GitLabMergeRequestsFiltersValue.MergeRequestsMemberFilterValue.MergeRequestsAssigneeFilterValue&quot;,\n      &quot;username&quot;: &quot;I6366245&quot;,\n      &quot;fullname&quot;: &quot;Pappas, Matthew (Stud. DACS)&quot;\n    }\n  }\n}</component>\n  <component name=\"GitLabMergeRequestsSettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;first&quot;: &quot;https://gitlab.maastrichtuniversity.nl/group7/transitor.git&quot;,\n    &quot;second&quot;: &quot;03ae2fad-d109-4f70-9d9d-687e0a74625c&quot;\n  }\n}</component>\n  <component name=\"JsBowerSettings\">\n    <bower-package value=\"\" />\n    <bower.json value=\"\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 3\n}</component>\n  <component name=\"ProjectId\" id=\"2drTimOiNSYVFBrO8m1HRx2dPgX\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.DataGetter.executor\": \"Run\",\n    \"Application.mapGUI.executor\": \"Run\",\n    \"DefaultHtmlFileTemplate\": \"HTML File\",\n    \"JUnit.DistanceCalculatorTest.testCalculateDistance.executor\": \"Run\",\n    \"JavaScript Debug.map.html.executor\": \"Run\",\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"git-widget-placeholder\": \"Jan4\",\n    \"kotlin-language-version-configured\": \"true\",\n    \"last_opened_file_path\": \"C:/Users/geveg/OneDrive/Desktop/schoo/transitor/lib/mysql-connector-j-8.3.0.jar\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"project.structure.last.edited\": \"Libraries\",\n    \"project.structure.proportion\": \"0.15\",\n    \"project.structure.side.proportion\": \"0.2\",\n    \"settings.editor.selected.configurable\": \"preferences.JavaFX\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  },\n  \"keyToStringList\": {\n    \"DatabaseDriversLRU\": [\n      \"mysql\"\n    ]\n  }\n}]]></component>\n  <component name=\"Push.Settings\">\n    <force-push-targets>\n      <force-push-target remote-path=\"origin\" branch=\"sqlQueryTest\" />\n    </force-push-targets>\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\geveg\\OneDrive\\Desktop\\schoo\\transitor\\lib\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.mapGUI\">\n    <configuration name=\"mapGUI\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\n      <envs>\n        <env name=\"DB_USERNAME\" value=\"root\" />\n        <env name=\"DB_PASSWORD\" value=\"Jatzunk91\" />\n      </envs>\n      <option name=\"MAIN_CLASS_NAME\" value=\"Gui.mapGUI\" />\n      <module name=\"transitor\" />\n      <option name=\"VM_PARAMETERS\" value=\"--module-path $USER_HOME$/Downloads/javafx-sdk-21.0.1/lib --add-modules javafx.controls,javafx.fxml,javafx.web \" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"Gui.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"DistanceCalculatorTest.testCalculateDistance\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"transitor\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"Test.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"Test\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"Test.DistanceCalculatorTest\" />\n      <option name=\"METHOD_NAME\" value=\"testCalculateDistance\" />\n      <option name=\"TEST_OBJECT\" value=\"method\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.mapGUI\" />\n      <item itemvalue=\"JUnit.DistanceCalculatorTest.testCalculateDistance\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"JUnit.DistanceCalculatorTest.testCalculateDistance\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.15989.150\" />\n        <option value=\"bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-IU-241.15989.150\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"9b700896-7dee-405c-8b3c-2e421fae2747\" name=\"Changes\" comment=\"\" />\n      <created>1710765326754</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1710765326754</updated>\n      <workItem from=\"1710765327865\" duration=\"141000\" />\n      <workItem from=\"1713969232926\" duration=\"1349000\" />\n      <workItem from=\"1714301748126\" duration=\"6558000\" />\n      <workItem from=\"1714313432515\" duration=\"1322000\" />\n      <workItem from=\"1714322777511\" duration=\"3258000\" />\n      <workItem from=\"1714408284333\" duration=\"5047000\" />\n      <workItem from=\"1714481616041\" duration=\"6649000\" />\n      <workItem from=\"1714829284099\" duration=\"4298000\" />\n      <workItem from=\"1714845314342\" duration=\"720000\" />\n      <workItem from=\"1715856201386\" duration=\"132000\" />\n      <workItem from=\"1715856338076\" duration=\"51000\" />\n      <workItem from=\"1715856393691\" duration=\"123000\" />\n      <workItem from=\"1715856520531\" duration=\"1569000\" />\n      <workItem from=\"1715859204228\" duration=\"4873000\" />\n      <workItem from=\"1715946709390\" duration=\"702000\" />\n      <workItem from=\"1715968911362\" duration=\"433000\" />\n      <workItem from=\"1715969347981\" duration=\"1031000\" />\n      <workItem from=\"1715970384030\" duration=\"6476000\" />\n      <workItem from=\"1715976883232\" duration=\"492000\" />\n      <workItem from=\"1716291643278\" duration=\"298000\" />\n      <workItem from=\"1716291960360\" duration=\"3338000\" />\n      <workItem from=\"1716452100398\" duration=\"4745000\" />\n      <workItem from=\"1716498034612\" duration=\"87000\" />\n      <workItem from=\"1716498124997\" duration=\"58000\" />\n      <workItem from=\"1716498190206\" duration=\"5000\" />\n      <workItem from=\"1716560288897\" duration=\"4648000\" />\n      <workItem from=\"1716640469418\" duration=\"3490000\" />\n      <workItem from=\"1716650401537\" duration=\"1228000\" />\n      <workItem from=\"1716652573082\" duration=\"293000\" />\n      <workItem from=\"1716653062539\" duration=\"414000\" />\n      <workItem from=\"1716716366211\" duration=\"11000\" />\n      <workItem from=\"1716742070901\" duration=\"2145000\" />\n      <workItem from=\"1716815982848\" duration=\"4288000\" />\n      <workItem from=\"1716835555124\" duration=\"2649000\" />\n      <workItem from=\"1716838212417\" duration=\"3955000\" />\n      <workItem from=\"1717000042292\" duration=\"224000\" />\n      <workItem from=\"1717000785082\" duration=\"604000\" />\n      <workItem from=\"1717056304587\" duration=\"282000\" />\n      <workItem from=\"1717951971956\" duration=\"1162000\" />\n      <workItem from=\"1717954398918\" duration=\"1129000\" />\n      <workItem from=\"1718019571846\" duration=\"7262000\" />\n      <workItem from=\"1718121645359\" duration=\"301000\" />\n      <workItem from=\"1718214384539\" duration=\"1126000\" />\n      <workItem from=\"1718737655139\" duration=\"7542000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"working on pulling from mysql\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1714311916441</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714311916441</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"working on pulling from mysql\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1714432008878</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714432008878</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"working on pulling from mysql\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1714496190328</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714496190328</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"woof meow meow woof woof\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1714838161315</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714838161315</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"woof meow meow woof woof\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1714838416980</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714838416980</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"woof meow meow woof woof\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1714845201503</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714845201503</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Merge remote-tracking branch 'origin/sqlQueryTest' into sqlQueryTest&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/Data/DataGetter.java\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1715949130531</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715949130532</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"DataGetter now uses new TripCoordinates class to fetch the coordinates from the bus stops result set, and prints them along with the stop name.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1715949242140</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715949242140</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"added deletion methods for stops and stop_times\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716294533517</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716294533517</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"added deletion methods for trips and routes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716295663642</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716295663642</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"added deletion methods for trips and routes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716376378804</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716376378804</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"error handling for incorrect postal code, plus working on adding departure and arrival pins as well\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716459572296</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716459572296</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"error handling for incorrect postal code, plus working on adding departure and arrival pins as well\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716459588841</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716459588841</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"error handling for incorrect postal code, plus working on adding departure and arrival pins as well\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716459599183</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716459599183</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"added a time input (trying to figure out how to display it)\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716649422144</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716649422144</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"added a time input fully functional\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716651583213</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716651583213</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"added a time input fully functional\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716652849338</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716652849338</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"added a time input fully functional\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716653084836</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716653084836</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"added some COOL stuff\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716819034746</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716819034746</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"added some COOL stuff\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716833116467</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716833116467</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"API worky smiley face\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716833379272</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716833379272</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"meow meow meow\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716834201983</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716834201983</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\"updated README.md\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716895325222</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716895325222</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\"finalizing changes\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716899004465</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716899004465</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\"donezo mcfunzo pt3\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1717000210582</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1717000210582</updated>\n    </task>\n    <task id=\"LOCAL-00026\" summary=\"query fixed\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1717953826357</created>\n      <option name=\"number\" value=\"00026\" />\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1717953826357</updated>\n    </task>\n    <task id=\"LOCAL-00027\" summary=\"query fixed but fr this time\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1718121739996</created>\n      <option name=\"number\" value=\"00027\" />\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1718121739996</updated>\n    </task>\n    <task id=\"LOCAL-00028\" summary=\"transfer trips visualization almost done\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1718739923790</created>\n      <option name=\"number\" value=\"00028\" />\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1718739923792</updated>\n    </task>\n    <task id=\"LOCAL-00029\" summary=\"added AccessibilityScoreCalculator class so i can start working on it\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1718834067491</created>\n      <option name=\"number\" value=\"00029\" />\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1718834067491</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"30\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"working on pulling from mysql\" />\n    <MESSAGE value=\"woof meow meow woof woof\" />\n    <MESSAGE value=\"Merge remote-tracking branch 'origin/sqlQueryTest' into sqlQueryTest&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/Data/DataGetter.java\" />\n    <MESSAGE value=\"DataGetter now uses new TripCoordinates class to fetch the coordinates from the bus stops result set, and prints them along with the stop name.\" />\n    <MESSAGE value=\"added deletion methods for stops and stop_times\" />\n    <MESSAGE value=\"added deletion methods for trips and routes\" />\n    <MESSAGE value=\"error handling for incorrect postal code, plus working on adding departure and arrival pins as well\" />\n    <MESSAGE value=\"error for no direct route added\" />\n    <MESSAGE value=\"added a time input (trying to figure out how to display it)\" />\n    <MESSAGE value=\"added a time input fully functional\" />\n    <MESSAGE value=\"added some COOL stuff\" />\n    <MESSAGE value=\"API worky smiley face\" />\n    <MESSAGE value=\"meow meow meow\" />\n    <MESSAGE value=\"updated README.md\" />\n    <MESSAGE value=\"finalizing changes\" />\n    <MESSAGE value=\"donezo mcfunzo pt3\" />\n    <MESSAGE value=\"query fixed\" />\n    <MESSAGE value=\"query fixed but fr this time\" />\n    <MESSAGE value=\"transfer trips visualization almost done\" />\n    <MESSAGE value=\"added AccessibilityScoreCalculator class so i can start working on it\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"added AccessibilityScoreCalculator class so i can start working on it\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <breakpoint enabled=\"true\" type=\"java-exception\">\n          <properties class=\"netscape.javascript.JSException\" package=\"netscape.javascript\" />\n          <option name=\"timeStamp\" value=\"2\" />\n        </breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand />\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 90601770cade0a63ca616dab2deeaf439b12f002)
+++ b/.idea/workspace.xml	(date 1719053801655)
@@ -4,7 +4,17 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="9b700896-7dee-405c-8b3c-2e421fae2747" name="Changes" comment="added AccessibilityScoreCalculator class so i can start working on it" />
+    <list default="true" id="9b700896-7dee-405c-8b3c-2e421fae2747" name="Changes" comment="added AccessibilityScoreCalculator class so i can start working on it">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/transitor/Data/AccessibilityScoreCalculator.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/transitor/Data/AccessibilityScoreCalculator.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/transitor/Data/DataGetter.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/transitor/Data/DataGetter.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/transitor/Gui/mapGUI.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/transitor/Gui/mapGUI.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/transitor/Test/AllTests.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Algorithm/Dijkstra/CustomDijkstra.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Algorithm/Dijkstra/CustomDijkstra.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Data/AccessibilityScoreCalculator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Data/AccessibilityScoreCalculator.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Data/DatabaseSingleton.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Data/DatabaseSingleton.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Test/AllTests.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Test/AllTests.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -36,7 +46,7 @@
     </favorite-branches>
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="Jan4" />
+        <entry key="$PROJECT_DIR$" value="jan56" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -82,7 +92,7 @@
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "Jan4",
+    "git-widget-placeholder": "Jan5",
     "kotlin-language-version-configured": "true",
     "last_opened_file_path": "C:/Users/geveg/OneDrive/Desktop/schoo/transitor/lib/mysql-connector-j-8.3.0.jar",
     "node.js.detected.package.eslint": "true",
@@ -153,6 +163,7 @@
     </list>
     <recent_temporary>
       <list>
+        <item itemvalue="JUnit.DistanceCalculatorTest.testCalculateDistance" />
         <item itemvalue="JUnit.DistanceCalculatorTest.testCalculateDistance" />
       </list>
     </recent_temporary>
Index: src/Data/AccessibilityScoreCalculator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Data;\n\nimport java.sql.*;\n\npublic class AccessibilityScoreCalculator {\n\n    private final DataGetter dataGetter;\n\n    public AccessibilityScoreCalculator() {\n        dataGetter = new DataGetter();\n    }\n\n    public double calculateAccessibility(String postalCode, double radius) {\n        double[] location = dataGetter.getLocationFromApiReader(postalCode);\n        if (location == null) {\n            throw new IllegalArgumentException(\"Invalid postal code\");\n        }\n\n        double lat = location[0];\n        double lon = location[1];\n\n        // Calculate distance to city center\n        double distanceToCenter = calculateDistanceToCenter(lat, lon);\n\n        // Calculate number of bus stops within radius\n        int busStopsWithinRadius = getBusStopsWithinRadius(lat, lon, radius);\n\n        // Fetch weighted count of amenities, shops, and tourism places\n        double weightedScore = calculateWeightedScore(lat, lon, radius);\n\n        // Calculate number of health facilities\n        int healthFacilitiesCount = getHealthFacilitiesCount(lat, lon, radius);\n\n        // Calculate number of educational institutions\n        int educationalInstitutionsCount = getEducationalInstitutionsCount(lat, lon, radius);\n\n        // Calculate number of supermarkets and convenience stores\n        int supermarketConvenienceCount = getSupermarketConvenienceCount(lat, lon, radius);\n\n        // Normalize the scores\n        double normalizedDistanceScore = normalizeDistanceScore(distanceToCenter);\n        double normalizedWeightedScore = normalizeWeightedScore(weightedScore);\n        double normalizedBusStopsScore = normalizeBusStopsScore(busStopsWithinRadius);\n        double normalizedHealthFacilitiesScore = normalizeHealthFacilitiesScore(healthFacilitiesCount);\n        double normalizedEducationalInstitutionsScore = normalizeEducationalInstitutionsScore(educationalInstitutionsCount);\n        double normalizedSupermarketConvenienceScore = normalizeSupermarketConvenienceScore(supermarketConvenienceCount);\n\n        // Calculate the total accessibility score\n        double totalAccessibilityScore = calculateTotalAccessibilityScore(\n                normalizedDistanceScore,\n                normalizedWeightedScore,\n                normalizedBusStopsScore,\n                normalizedHealthFacilitiesScore,\n                normalizedEducationalInstitutionsScore,\n                normalizedSupermarketConvenienceScore\n        );\n\n        // Convert the total score into a score out of 100\n        double accessibilityScore = Math.round(totalAccessibilityScore * 10000) / 100.0;\n\n        // Print results\n        System.out.println(\"Postal Code: \" + postalCode);\n        System.out.println(\"Distance to Center (normalized): \" + normalizedDistanceScore);\n        System.out.println(\"Weighted Accessibility Score (normalized): \" + normalizedWeightedScore);\n        System.out.println(\"Bus Stops within \" + radius + \" km (normalized): \" + normalizedBusStopsScore);\n        System.out.println(\"Health Facilities within \" + radius + \" km (normalized): \" + normalizedHealthFacilitiesScore);\n        System.out.println(\"Educational Institutions within \" + radius + \" km (normalized): \" + normalizedEducationalInstitutionsScore);\n        System.out.println(\"Supermarkets and Convenience Stores within \" + radius + \" km (normalized): \" + normalizedSupermarketConvenienceScore);\n        System.out.println(\"Total Accessibility Score: \" + accessibilityScore );\n        return accessibilityScore;\n    }\n\n    private double calculateDistanceToCenter(double lat, double lon) {\n        final double CITY_CENTER_LAT = 50.8516;\n        final double CITY_CENTER_LON = 5.6915;\n        return 6371 * Math.acos(Math.cos(Math.toRadians(CITY_CENTER_LAT)) * Math.cos(Math.toRadians(lat))\n                * Math.cos(Math.toRadians(lon) - Math.toRadians(CITY_CENTER_LON))\n                + Math.sin(Math.toRadians(CITY_CENTER_LAT)) * Math.sin(Math.toRadians(lat)));\n    }\n\n    private int getBusStopsWithinRadius(double lat, double lon, double radius) {\n        int count = 0;\n        Connection conn = DatabaseSingleton.getConnection();\n        String query = \"SELECT COUNT(s.stop_id) AS bus_stops_within_radius \" +\n                \"FROM stops s \" +\n                \"WHERE (6371 * ACOS(COS(RADIANS(?)) * COS(RADIANS(s.stop_lat)) \" +\n                \"* COS(RADIANS(s.stop_lon) - RADIANS(?)) + SIN(RADIANS(?)) * SIN(RADIANS(s.stop_lat)))) <= ?\";\n        try {\n            assert conn != null;\n            try (PreparedStatement stmt = conn.prepareStatement(query)) {\n                stmt.setDouble(1, lat);\n                stmt.setDouble(2, lon);\n                stmt.setDouble(3, lat);\n                stmt.setDouble(4, radius);\n                ResultSet resultSet = stmt.executeQuery();\n                if (resultSet.next()) {\n                    count = resultSet.getInt(\"bus_stops_within_radius\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return count;\n    }\n\n    private double calculateWeightedScore(double lat, double lon, double radius) {\n        double totalScore = 0;\n        Connection conn = DatabaseSingleton.getConnection();\n        String query = \"SELECT w.weight \" +\n                \"FROM weights w \" +\n                \"JOIN ( \" +\n                \"    SELECT 'amenity' AS category, type, latitude, longitude \" +\n                \"    FROM amenities \" +\n                \"    UNION ALL \" +\n                \"    SELECT 'shop' AS category, type, latitude, longitude \" +\n                \"    FROM shops \" +\n                \"    UNION ALL \" +\n                \"    SELECT 'tourism' AS category, type, tourism.latitude, tourism.longitude \" +\n                \"    FROM tourism \" +\n                \") AS combined \" +\n                \"ON w.type = combined.type AND w.category = combined.category \" +\n                \"WHERE (6371 * ACOS(COS(RADIANS(?)) * COS(RADIANS(combined.latitude)) \" +\n                \"* COS(RADIANS(combined.longitude) - RADIANS(?)) + SIN(RADIANS(?)) * SIN(RADIANS(combined.latitude)))) <= ?\";\n        try {\n            assert conn != null;\n            try (PreparedStatement stmt = conn.prepareStatement(query)) {\n                stmt.setDouble(1, lat);\n                stmt.setDouble(2, lon);\n                stmt.setDouble(3, lat);\n                stmt.setDouble(4, radius);\n                ResultSet resultSet = stmt.executeQuery();\n                while (resultSet.next()) {\n                    double weight = resultSet.getDouble(\"weight\");\n                    totalScore += weight;\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return totalScore;\n    }\n\n    private int getHealthFacilitiesCount(double lat, double lon, double radius) {\n        int count = 0;\n        Connection conn = DatabaseSingleton.getConnection();\n        String query = \"SELECT COUNT(*) AS health_facilities_count \" +\n                \"FROM amenities \" +\n                \"WHERE type IN ('hospital', 'clinic', 'pharmacy', 'dentist', 'doctors') \" +\n                \"AND (6371 * ACOS(COS(RADIANS(?)) * COS(RADIANS(latitude)) \" +\n                \"* COS(RADIANS(longitude) - RADIANS(?)) + SIN(RADIANS(?)) * SIN(RADIANS(latitude)))) <= ?\";\n        try {\n            assert conn != null;\n            try (PreparedStatement stmt = conn.prepareStatement(query)) {\n                stmt.setDouble(1, lat);\n                stmt.setDouble(2, lon);\n                stmt.setDouble(3, lat);\n                stmt.setDouble(4, radius);\n                ResultSet resultSet = stmt.executeQuery();\n                if (resultSet.next()) {\n                    count = resultSet.getInt(\"health_facilities_count\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return count;\n    }\n\n    private int getEducationalInstitutionsCount(double lat, double lon, double radius) {\n        int count = 0;\n        Connection conn = DatabaseSingleton.getConnection();\n        String query = \"SELECT COUNT(*) AS educational_institutions_count \" +\n                \"FROM amenities \" +\n                \"WHERE type IN ('school', 'university', 'college') \" +\n                \"AND (6371 * ACOS(COS(RADIANS(?)) * COS(RADIANS(latitude)) \" +\n                \"* COS(RADIANS(longitude) - RADIANS(?)) + SIN(RADIANS(?)) * SIN(RADIANS(latitude)))) <= ?\";\n        try {\n            assert conn != null;\n            try (PreparedStatement stmt = conn.prepareStatement(query)) {\n                stmt.setDouble(1, lat);\n                stmt.setDouble(2, lon);\n                stmt.setDouble(3, lat);\n                stmt.setDouble(4, radius);\n                ResultSet resultSet = stmt.executeQuery();\n                if (resultSet.next()) {\n                    count = resultSet.getInt(\"educational_institutions_count\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return count;\n    }\n\n    private int getSupermarketConvenienceCount(double lat, double lon, double radius) {\n        int count = 0;\n        Connection conn = DatabaseSingleton.getConnection();\n        String query = \"SELECT COUNT(*) AS supermarket_convenience_count \" +\n                \"FROM shops \" +\n                \"WHERE type IN ('supermarket', 'convenience') \" +\n                \"AND (6371 * ACOS(COS(RADIANS(?)) * COS(RADIANS(latitude)) \" +\n                \"* COS(RADIANS(longitude) - RADIANS(?)) + SIN(RADIANS(?)) * SIN(RADIANS(latitude)))) <= ?\";\n        try {\n            assert conn != null;\n            try (PreparedStatement stmt = conn.prepareStatement(query)) {\n                stmt.setDouble(1, lat);\n                stmt.setDouble(2, lon);\n                stmt.setDouble(3, lat);\n                stmt.setDouble(4, radius);\n                ResultSet resultSet = stmt.executeQuery();\n                if (resultSet.next()) {\n                    count = resultSet.getInt(\"supermarket_convenience_count\");\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return count;\n    }\n\n    private double normalizeDistanceScore(double distance) {\n        final double MAX_DISTANCE = 10.0;\n        return Math.min(1, 1 - (distance / MAX_DISTANCE));\n    }\n\n    private double normalizeWeightedScore(double weightedScore) {\n        final double MAX_WEIGHTED_SCORE = 300.0;\n        return Math.min(1, weightedScore / MAX_WEIGHTED_SCORE);\n    }\n\n    private double normalizeBusStopsScore(int busStopsCount) {\n        final int MAX_BUS_STOPS = 20;\n        return Math.min(1, (double) busStopsCount / MAX_BUS_STOPS);\n    }\n\n    private double normalizeHealthFacilitiesScore(int healthFacilitiesCount) {\n        final int MAX_HEALTH_FACILITIES = 20;\n        return Math.min(1, (double) healthFacilitiesCount / MAX_HEALTH_FACILITIES);\n    }\n\n    private double normalizeEducationalInstitutionsScore(int educationalInstitutionsCount) {\n        final int MAX_EDUCATIONAL_INSTITUTIONS = 10;\n        return Math.min(1, (double) educationalInstitutionsCount / MAX_EDUCATIONAL_INSTITUTIONS);\n    }\n\n    private double normalizeSupermarketConvenienceScore(int supermarketConvenienceCount) {\n        final int MAX_SUPERMARKET_CONVENIENCE = 10;\n        return Math.min(1, (double) supermarketConvenienceCount / MAX_SUPERMARKET_CONVENIENCE);\n    }\n\n    private double calculateTotalAccessibilityScore(double normalizedDistanceScore, double normalizedWeightedScore, double normalizedBusStopsScore, double normalizedHealthFacilitiesScore, double normalizedEducationalInstitutionsScore, double normalizedSupermarketConvenienceScore) {\n        final double WEIGHT_DISTANCE = 0.2;\n        final double WEIGHT_WEIGHTED_SCORE = 0.4;\n        final double WEIGHT_BUS_STOPS = 0.1;\n        final double WEIGHT_HEALTH_FACILITIES = 0.1;\n        final double WEIGHT_EDUCATIONAL_INSTITUTIONS = 0.1;\n        final double WEIGHT_SUPERMARKET_CONVENIENCE = 0.1;\n        return (WEIGHT_DISTANCE * normalizedDistanceScore) +\n                (WEIGHT_WEIGHTED_SCORE * normalizedWeightedScore) +\n                (WEIGHT_BUS_STOPS * normalizedBusStopsScore) +\n                (WEIGHT_HEALTH_FACILITIES * normalizedHealthFacilitiesScore) +\n                (WEIGHT_EDUCATIONAL_INSTITUTIONS * normalizedEducationalInstitutionsScore) +\n                (WEIGHT_SUPERMARKET_CONVENIENCE * normalizedSupermarketConvenienceScore);\n    }\n\n    public static void main(String[] args) {\n        AccessibilityScoreCalculator calculator = new AccessibilityScoreCalculator();\n        calculator.calculateAccessibility(\"6221BR\", 0.5);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Data/AccessibilityScoreCalculator.java b/src/Data/AccessibilityScoreCalculator.java
--- a/src/Data/AccessibilityScoreCalculator.java	(revision 90601770cade0a63ca616dab2deeaf439b12f002)
+++ b/src/Data/AccessibilityScoreCalculator.java	(date 1719051508452)
@@ -9,7 +9,6 @@
     public AccessibilityScoreCalculator() {
         dataGetter = new DataGetter();
     }
-
     public double calculateAccessibility(String postalCode, double radius) {
         double[] location = dataGetter.getLocationFromApiReader(postalCode);
         if (location == null) {
Index: src/Test/AllTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Test;\n\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Suite;\n\n@RunWith(Suite.class)\n@Suite.SuiteClasses({    \n    DistanceCalculatorTest.class,\n    DatabaseSingletonTest.class,\n//    DataGetterTest.class,\n    TripCoordinatesTest.class,\n    TripDetailTest.class,\n    ApiReaderTest.class,\n    //MapGuiTest.class,\n    //MapLoader.class\n\n})\npublic class AllTests {}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Test/AllTests.java b/src/Test/AllTests.java
--- a/src/Test/AllTests.java	(revision 90601770cade0a63ca616dab2deeaf439b12f002)
+++ b/src/Test/AllTests.java	(date 1719051508460)
@@ -1,18 +1,18 @@
-package Test;
-
-import org.junit.runner.RunWith;
-import org.junit.runners.Suite;
-
-@RunWith(Suite.class)
-@Suite.SuiteClasses({    
-    DistanceCalculatorTest.class,
-    DatabaseSingletonTest.class,
-//    DataGetterTest.class,
-    TripCoordinatesTest.class,
-    TripDetailTest.class,
-    ApiReaderTest.class,
-    //MapGuiTest.class,
-    //MapLoader.class
-
-})
-public class AllTests {}
+//package Test;
+//
+//import org.junit.runner.RunWith;
+//import org.junit.runners.Suite;
+//
+//@RunWith(Suite.class)
+//@Suite.SuiteClasses({
+//    DistanceCalculatorTest.class,
+//    DatabaseSingletonTest.class,
+////    DataGetterTest.class,
+//    TripCoordinatesTest.class,
+//    TripDetailTest.class,
+//    ApiReaderTest.class,
+//    //MapGuiTest.class,
+//    //MapLoader.class
+//
+//})
+//public class AllTests {}
