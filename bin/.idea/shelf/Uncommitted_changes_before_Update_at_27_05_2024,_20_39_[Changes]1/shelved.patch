Index: src/Data/DatabaseSingleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Data;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseSingleton {\n    private static Connection connection = null;\n\n    private DatabaseSingleton() { }\n\n    public static Connection getConnection() {\n        if (connection == null) {\n            try {\n                connection = DriverManager.getConnection(\n                    \"jdbc:mysql://localhost:3306/bcs7?useSSL=false&allowPublicKeyRetrieval=true\", \n                    \"root\", \n                    \"Jatzunk91\");\n            } catch (SQLException e) {\n                System.out.println(\"Error connecting to the database: \" + e.getMessage());\n                return null;\n            }\n        }\n        return connection;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Data/DatabaseSingleton.java b/src/Data/DatabaseSingleton.java
--- a/src/Data/DatabaseSingleton.java	
+++ b/src/Data/DatabaseSingleton.java	
@@ -15,7 +15,7 @@
                 connection = DriverManager.getConnection(
                     "jdbc:mysql://localhost:3306/bcs7?useSSL=false&allowPublicKeyRetrieval=true", 
                     "root", 
-                    "Jatzunk91");
+                    "pocoloski99");
             } catch (SQLException e) {
                 System.out.println("Error connecting to the database: " + e.getMessage());
                 return null;
Index: src/Gui/PostcodeInputPane.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Gui;\n\nimport javafx.application.Platform;\nimport javafx.geometry.Insets;\nimport javafx.geometry.Pos;\nimport javafx.scene.control.ComboBox;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.control.Button;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.VBox;\nimport javafx.scene.paint.Color;\n\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\n\npublic class PostcodeInputPane extends VBox {\n    private double startLong;\n    private double startLat;\n    private double destinationLong;\n    private double destinationLat;\n    private double distance;\n    private int cyclingTime;\n    private int walkingTime;\n    private Label distanceLabel;\n    private Label walkingTimeLabel;\n    private Label cyclingTimeLabel;\n    private Label busTripTimeLabel;\n    private Label msgLabel;\n    private TextArea routeDetails;\n    private ComboBox<String> timeBox;\n    private Button nowButton;\n\n    private final PostcodeInputListener listener;\n\n    public PostcodeInputPane(PostcodeInputListener listener) {\n        this.listener = listener;\n        setSpacing(10);\n        setAlignment(Pos.CENTER);\n        setPadding(new Insets(10));\n\n        Label originLabel = new Label(\"Origin\");\n        HBox originBox = createTextFieldBox();\n        originBox.setAlignment(Pos.CENTER);\n\n        Label destinationLabel = new Label(\"Destination\");\n        HBox destinationBox = createTextFieldBox();\n        destinationBox.setAlignment(Pos.CENTER);\n\n        Label timeLabel = new Label(\"Select Time of Day:\");\n        timeBox = new ComboBox<>();\n        timeBox.setEditable(true);\n        addTimesToBox();\n        setCurrentTime();\n        nowButton = new Button(\"Now\");\n        nowButton.setOnAction(e -> setCurrentTime());\n\n        HBox timeBox = new HBox(10, this.timeBox, nowButton);\n        timeBox.setAlignment(Pos.CENTER);\n\n        this.distanceLabel = new Label(\"Distance: 0 KM\");\n        this.walkingTimeLabel = new Label(\"Walking: 0 minutes\");\n        this.cyclingTimeLabel = new Label(\"Cycling: 0 minutes\");\n        this.busTripTimeLabel = new Label(\"Bus Trip Time: 0 minutes\");\n        this.msgLabel = new Label();\n        this.msgLabel.setTextFill(Color.RED);\n\n        this.routeDetails = new TextArea();\n        this.routeDetails.setEditable(false);\n        this.routeDetails.setWrapText(true);\n        this.routeDetails.setPrefRowCount(3);\n        this.routeDetails.setPrefColumnCount(20);\n\n        getChildren().addAll(originLabel, originBox, destinationLabel, destinationBox, timeLabel, timeBox, distanceLabel, walkingTimeLabel, cyclingTimeLabel, busTripTimeLabel, routeDetails, msgLabel);\n        setMargin(walkingTimeLabel, new Insets(20, 0, 0, 10));\n        setMargin(distanceLabel, new Insets(40, 0, 0, 10));\n        setMargin(cyclingTimeLabel, new Insets(20, 0, 0, 10));\n        setMargin(busTripTimeLabel, new Insets(20, 0, 0, 10));\n    }\n\n    private HBox createTextFieldBox() {\n        HBox box = new HBox(10);\n        box.setAlignment(Pos.CENTER);\n\n        for (int i = 0; i < 6; i++) {\n            boolean acceptsDigitsOnly = i < 4;\n            PostcodeTextField textField = new PostcodeTextField(!acceptsDigitsOnly);\n            int finalI = i;\n            textField.setOnKeyPressed(event -> {\n                if (event.getCode() == KeyCode.BACK_SPACE && textField.getText().isEmpty() && finalI > 0) {\n                    PostcodeTextField previousField = (PostcodeTextField) box.getChildren().get(finalI - 1);\n                    previousField.requestFocus();\n                    previousField.selectAll();\n                    event.consume();\n                }\n            });\n            textField.setOnKeyReleased(event -> {\n                if (event.getCode() != KeyCode.BACK_SPACE && textField.getText().length() == 1) {\n                    if (finalI < 5) {\n                        PostcodeTextField nextField = (PostcodeTextField) box.getChildren().get(finalI + 1);\n                        nextField.requestFocus();\n                        nextField.selectAll();\n                    } else {\n                        textField.getParent().requestFocus();\n                    }\n                }\n            });\n            box.getChildren().add(textField);\n        }\n\n        return box;\n    }\n\n    private void addTimesToBox() {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm\");\n        for (int hour = 0; hour < 24; hour++) {\n            for (int minute = 0; minute < 60; minute += 15) {\n                LocalTime time = LocalTime.of(hour, minute);\n                timeBox.getItems().add(time.format(formatter));\n            }\n        }\n    }\n\n    private void setCurrentTime() {\n        LocalTime now = LocalTime.now();\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm\");\n        timeBox.setValue(now.format(formatter));\n    }\n\n    public String getSelectedTime() {\n        return timeBox.getValue();\n    }\n\n    public String getOriginPostcodes() {\n        return getPostcodeAsString(1);\n    }\n\n    public String getDestinationPostcodes() {\n        return getPostcodeAsString(3);\n    }\n\n    private String getPostcodeAsString(int startIndex) {\n        StringBuilder postcode = new StringBuilder();\n        for (javafx.scene.Node node : ((HBox) getChildren().get(startIndex)).getChildren()) {\n            if (node instanceof PostcodeTextField) {\n                PostcodeTextField textField = (PostcodeTextField) node;\n                postcode.append(textField.getText());\n            }\n        }\n        return postcode.toString().toUpperCase();\n    }\n\n\n    public void updateLogistics(double distance, int walkingTime, int cyclingTime, int busTripTime) {\n        Platform.runLater(() -> {\n            distanceLabel.setText(String.format(\"Distance: %.2f km\", distance));\n            walkingTimeLabel.setText(String.format(\"Walking Time: %d minutes\", walkingTime));\n            cyclingTimeLabel.setText(String.format(\"Cycling Time: %d minutes\", cyclingTime));\n            busTripTimeLabel.setText(String.format(\"Bus Trip Time: %d minutes\", busTripTime));\n        });\n    }\n\n    public void updateRouteDetails(String details) {\n        Platform.runLater(() -> {\n            routeDetails.setText(details);\n        });\n    }\n\n    public void displayError(String message) {\n        Platform.runLater(() -> {\n            msgLabel.setText(message);\n            msgLabel.setTextFill(Color.RED);\n            msgLabel.setVisible(true);\n        });\n    }\n\n    public void clearError() {\n        Platform.runLater(() -> {\n            msgLabel.setText(\"\");\n            msgLabel.setVisible(false);\n        });\n    }\n    public void displayInfo(String message) {\n        Platform.runLater(() -> {\n            msgLabel.setText(message);\n            msgLabel.setTextFill(Color.BLUE);\n            msgLabel.setVisible(true);\n        });\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Gui/PostcodeInputPane.java b/src/Gui/PostcodeInputPane.java
--- a/src/Gui/PostcodeInputPane.java	
+++ b/src/Gui/PostcodeInputPane.java	
@@ -48,7 +48,7 @@
         HBox destinationBox = createTextFieldBox();
         destinationBox.setAlignment(Pos.CENTER);
 
-        Label timeLabel = new Label("Select Time of Day:");
+        Label timeLabel = new Label("Departure Time:");
         timeBox = new ComboBox<>();
         timeBox.setEditable(true);
         addTimesToBox();
@@ -59,10 +59,10 @@
         HBox timeBox = new HBox(10, this.timeBox, nowButton);
         timeBox.setAlignment(Pos.CENTER);
 
-        this.distanceLabel = new Label("Distance: 0 KM");
-        this.walkingTimeLabel = new Label("Walking: 0 minutes");
-        this.cyclingTimeLabel = new Label("Cycling: 0 minutes");
-        this.busTripTimeLabel = new Label("Bus Trip Time: 0 minutes");
+        this.distanceLabel = new Label("Distance:");
+        this.walkingTimeLabel = new Label("Walking:");
+        this.cyclingTimeLabel = new Label("Cycling:");
+        this.busTripTimeLabel = new Label("Bus Trip Time:");
         this.msgLabel = new Label();
         this.msgLabel.setTextFill(Color.RED);
 
Index: src/Gui/mapGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Gui;\n\nimport Algorithm.Distance.DistanceCalculator;\nimport Data.DataGetter;\nimport Data.TripCoordinates;\nimport javafx.application.Application;\nimport javafx.application.Platform;\nimport javafx.geometry.Insets;\nimport javafx.geometry.Pos;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.Slider;\nimport javafx.scene.layout.BorderPane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Logger;\n\npublic class mapGUI extends Application implements PostcodeInputListener {\n    private static final Logger logger = Logger.getLogger(mapGUI.class.getName());\n    private final PostcodeInputPane locationInput = new PostcodeInputPane(this);\n    private final MapLoader mapLoader = new MapLoader();\n    private final DistanceCalculator distanceCalculator = new DistanceCalculator();\n    private double radius = 0.2;\n\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        BorderPane borderPane = new BorderPane();\n        borderPane.setCenter(mapLoader);\n        VBox leftContainer = new VBox(10);\n        leftContainer.setPadding(new Insets(10));\n        leftContainer.getChildren().add(locationInput);\n        leftContainer.setAlignment(Pos.TOP_CENTER);\n        locationInput.setAlignment(Pos.CENTER);\n\n        Label radiusLabel = new Label(\"Radius: 200 m\");\n        Slider radiusSlider = new Slider(0.2, 2.0, 0.2);\n        radiusSlider.setShowTickMarks(true);\n        radiusSlider.setShowTickLabels(true);\n        radiusSlider.setMajorTickUnit(0.2);\n        radiusSlider.setMinorTickCount(4);\n        radiusSlider.setBlockIncrement(0.1);\n        radiusSlider.setSnapToTicks(true);\n\n        radiusSlider.valueProperty().addListener((observable, oldValue, newValue) -> {\n            radius = newValue.doubleValue();\n            radiusLabel.setText(String.format(\"Radius: %.0f m\", radius * 1000));\n        });\n\n        VBox sliderContainer = new VBox(5, radiusLabel, radiusSlider);\n        sliderContainer.setAlignment(Pos.CENTER);\n\n        leftContainer.getChildren().add(sliderContainer);\n\n        Button calculateButton = new Button(\"Calculate Distance\");\n        calculateButton.setStyle(\"-fx-background-color: #4CAF50; -fx-text-fill: white; -fx-font-size: 14px; -fx-padding: 10px 20px;\");\n        calculateButton.setOnAction(event -> {\n            String originPostcode = locationInput.getOriginPostcodes();\n            String destinationPostcode = locationInput.getDestinationPostcodes();\n            String selectedTime = locationInput.getSelectedTime();\n            onPostcodesEntered(originPostcode, destinationPostcode, radius, selectedTime);\n        });\n        leftContainer.getChildren().add(calculateButton);\n\n        borderPane.setLeft(leftContainer);\n\n        Scene scene = new Scene(borderPane);\n        primaryStage.setScene(scene);\n        primaryStage.setResizable(false);\n        primaryStage.show();\n    }\n\n    @Override\n    public void onPostcodesEntered(String originPostcode, String destinationPostcode, double radius, String time) {\n        this.radius = radius;\n        new Thread(() -> {\n            try {\n                double[] originCoordinates = DataGetter.getLocationFromApiReader(originPostcode);\n                double[] destinationCoordinates = DataGetter.getLocationFromApiReader(destinationPostcode);\n\n                if (originCoordinates != null && destinationCoordinates != null) {\n                    Platform.runLater(() -> {\n                        locationInput.clearError();\n                        logger.info(String.format(\"Origin Coordinates: (%.6f, %.6f)\", originCoordinates[0], originCoordinates[1]));\n                        logger.info(String.format(\"Destination Coordinates: (%.6f, %.6f)\", destinationCoordinates[0], destinationCoordinates[1]));\n                        logger.info(\"Radius used in onPostcodesEntered: \" + radius + \" km\");\n                        addMarkersAndPathToMap(originCoordinates[0], originCoordinates[1], destinationCoordinates[0], destinationCoordinates[1], radius, time);\n                    });\n                } else {\n                    Platform.runLater(() -> locationInput.displayError(\"Invalid postcodes. Please try again\"));\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n                logger.severe(\"Error retrieving coordinates: \" + e.getMessage());\n                Platform.runLater(() -> locationInput.displayError(\"Error retrieving coordinates. Please try again\"));\n            }\n        }).start();\n    }\n\n    private void addMarkersAndPathToMap(double originLat, double originLong, double destinationLat, double destinationLong, double radius, String time) {\n        new Thread(() -> {\n            try {\n                TripCoordinates tripCoordinates = DataGetter.findFastestRouteInfo(originLat, originLong, destinationLat, destinationLong, radius, time);\n\n                if (tripCoordinates != null) {\n                    double distance = distanceCalculator.calculateDistance(originLat, originLong, destinationLat, destinationLong);\n                    int walkingTime = distanceCalculator.calculateWalkingTime(distance);\n                    int cyclingTime = distanceCalculator.calculateCyclingTime(distance);\n                    int busTripTime = tripCoordinates.getBusTripTime() / 60;\n\n                    Platform.runLater(() -> {\n                        mapLoader.clearMap();\n                        locationInput.displayInfo(\"Your bus leaves the start stop at: \" + tripCoordinates.getDepartureTime());\n                        List<double[]> routeCoordinates = new ArrayList<>();\n\n\n                        mapLoader.addMapMarker(originLat, originLong, \"Origin Postcode\", \"blue\");\n                        routeCoordinates.add(new double[]{originLat, originLong});\n\n\n                        mapLoader.addMapMarker(destinationLat, destinationLong, \"Destination Postcode\", \"green\");\n                        routeCoordinates.add(new double[]{destinationLat, destinationLong});\n\n\n                        mapLoader.addMapMarker(tripCoordinates.getStartStopLat(), tripCoordinates.getStartStopLon(), tripCoordinates.getStartStopName(), \"red\");\n                        routeCoordinates.add(new double[]{tripCoordinates.getStartStopLat(), tripCoordinates.getStartStopLon()});\n\n\n                        mapLoader.drawLine(originLat, originLong, tripCoordinates.getStartStopLat(), tripCoordinates.getStartStopLon(), \"blue\", true);\n\n                        mapLoader.addMapMarker(tripCoordinates.getEndStopLat(), tripCoordinates.getEndStopLon(), tripCoordinates.getEndStopName(), \"red\");\n                        routeCoordinates.add(new double[]{tripCoordinates.getEndStopLat(), tripCoordinates.getEndStopLon()});\n\n                        mapLoader.drawLine(destinationLat, destinationLong, tripCoordinates.getEndStopLat(), tripCoordinates.getEndStopLon(), \"green\", true);\n\n                        double previousLat = tripCoordinates.getStartStopLat();\n                        double previousLon = tripCoordinates.getStartStopLon();\n                        StringBuilder intermediateStops = new StringBuilder(\"Intermediate Stops:\\n\");\n                        for (String[] stopDetails : tripCoordinates.getIntermediateStopDetails()) {\n                            double lat = Double.parseDouble(stopDetails[1]);\n                            double lon = Double.parseDouble(stopDetails[2]);\n                            String stopName = stopDetails[0];\n                            mapLoader.addMapMarker(lat, lon, stopName, \"red\");\n                            mapLoader.drawLine(previousLat, previousLon, lat, lon, \"purple\", false); // Use purple color for bus route\n                            previousLat = lat;\n                            previousLon = lon;\n                            routeCoordinates.add(new double[]{lat, lon});\n                            intermediateStops.append(stopName).append(\"\\n\");\n                        }\n\n                        setMapCenter(routeCoordinates);\n\n                        locationInput.updateLogistics(distance, walkingTime, cyclingTime, busTripTime);\n\n\n                        locationInput.updateRouteDetails(\"Bus number: \" + DataGetter.getBusNumber(tripCoordinates.getRouteID()) + \"\\n\" + intermediateStops.toString());\n                    });\n                } else {\n                    Platform.runLater(() -> locationInput.displayError(\"No trip found for the given coordinates.\"));\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n                Platform.runLater(() -> locationInput.displayError(\"Database error occurred. Please try again.\"));\n            }\n        }).start();\n    }\n\n    private void setMapCenter(List<double[]> coordinates) {\n        if (coordinates.isEmpty()) {\n            return;\n        }\n        double totalLat = 0;\n        double totalLon = 0;\n        for (double[] coordinate : coordinates) {\n            totalLat += coordinate[0];\n            totalLon += coordinate[1];\n        }\n        double centerLat = totalLat / coordinates.size();\n        double centerLon = totalLon / coordinates.size();\n        Platform.runLater(() -> mapLoader.setCenter(centerLat, centerLon, 14)); // Adjust zoom level as needed\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Gui/mapGUI.java b/src/Gui/mapGUI.java
--- a/src/Gui/mapGUI.java	
+++ b/src/Gui/mapGUI.java	
@@ -139,13 +139,13 @@
 
                         double previousLat = tripCoordinates.getStartStopLat();
                         double previousLon = tripCoordinates.getStartStopLon();
-                        StringBuilder intermediateStops = new StringBuilder("Intermediate Stops:\n");
+                        StringBuilder intermediateStops = new StringBuilder("Stops:\n");
                         for (String[] stopDetails : tripCoordinates.getIntermediateStopDetails()) {
                             double lat = Double.parseDouble(stopDetails[1]);
                             double lon = Double.parseDouble(stopDetails[2]);
                             String stopName = stopDetails[0];
                             mapLoader.addMapMarker(lat, lon, stopName, "red");
-                            mapLoader.drawLine(previousLat, previousLon, lat, lon, "purple", false); // Use purple color for bus route
+                            mapLoader.drawLine(previousLat, previousLon, lat, lon, "purple", false);
                             previousLat = lat;
                             previousLon = lon;
                             routeCoordinates.add(new double[]{lat, lon});
